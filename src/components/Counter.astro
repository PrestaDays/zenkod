---
interface Props {
    target: number;
    label: string;
    duration?: number;
}

const { target, label, duration = 2000 } = Astro.props;
---

<div class="counter text-center" data-target={target} data-duration={duration}>
    <div class="text-5xl font-bold text-[#2A4747]">0</div>
    <div class="text-sm mt-2 text-gray-600 uppercase">{label}</div>
</div>

<script>
    // Fonction pour animer un compteur
    function animateCounter(element: HTMLElement, target: number, duration: number) {
        const countElement = element.querySelector('div') as HTMLDivElement;
        if (!countElement) return;

        let start = 0;
        const step = Math.ceil(target / (duration / 16));

        const timer = setInterval(() => {
            start += step;
            if (start >= target) {
                countElement.textContent = target.toString();
                clearInterval(timer);
            } else {
                countElement.textContent = start.toString();
            }
        }, 16);
    }

    // Observer pour détecter quand les compteurs entrent dans le viewport
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const element = entry.target as HTMLElement;
                const target = parseInt(element.dataset.target || '0', 10);
                const duration = parseInt(element.dataset.duration || '2000', 10);

                animateCounter(element, target, duration);

                // Ne déclencher l'animation qu'une seule fois
                observer.unobserve(element);
            }
        });
    }, {
        threshold: 0
    });

    // Observer tous les compteurs
    document.querySelectorAll('.counter').forEach(counter => {
        observer.observe(counter);
    });
</script>
