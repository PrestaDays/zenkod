---
// Pas de props nécessaires pour ce composant
---

<div class="w-full max-w-4xl">
    <form
        id="contact-form"
        class="bg-[#4A6670] p-4 md:p-8 rounded-lg w-full max-w-4xl mb-12 md:mb-20 transform transition duration-700 hover:scale-[1.02] animate-fade-in"
    >
        <div class="flex flex-col md:flex-row md:space-x-8 mb-4 animate-slide-in">
            <div class="w-full md:w-1/2 mb-4 md:mb-0">
                <label class="text-white transition-all duration-300 hover:text-gray-200 block mb-1">Nom :</label>
                <input
                    type="text"
                    name="nom"
                    placeholder="Votre nom"
                    class="w-full p-2 rounded transition-all duration-300 focus:ring-2 focus:ring-blue-400 focus:scale-105 hover:shadow-lg"
                    required
                />
            </div>

            <div class="w-full md:w-1/2">
                <label class="text-white transition-all duration-300 hover:text-gray-200 block mb-1">Prénom :</label>
                <input
                    type="text"
                    name="prenom"
                    placeholder="Votre prénom"
                    class="w-full p-2 rounded transition-all duration-300 focus:ring-2 focus:ring-blue-400 focus:scale-105 hover:shadow-lg"
                    required
                />
            </div>
        </div>

        <div class="flex flex-col md:flex-row md:space-x-8 mb-4 animate-slide-in" style="animation-delay: 200ms;">
            <div class="w-full md:w-1/2 mb-4 md:mb-0">
                <label class="text-white transition-all duration-300 hover:text-gray-200 block mb-1">
                    Projet/Entreprise :
                </label>
                <input
                    type="text"
                    name="projet"
                    placeholder="Nom de votre projet/entreprise"
                    class="w-full p-2 rounded transition-all duration-300 focus:ring-2 focus:ring-blue-400 focus:scale-105 hover:shadow-lg"
                    required
                />
            </div>

            <div class="w-full md:w-1/2">
                <label class="text-white transition-all duration-300 hover:text-gray-200 block mb-1">Email :</label>
                <input
                    type="email"
                    name="email"
                    placeholder="Votre email"
                    class="w-full p-2 rounded transition-all duration-300 focus:ring-2 focus:ring-blue-400 focus:scale-105 hover:shadow-lg"
                    required
                />
            </div>
        </div>

        <div class="mb-4 animate-slide-in" style="animation-delay: 400ms;">
            <label class="text-white transition-all duration-300 hover:text-gray-200 block mb-1">Message :</label>
            <textarea
                name="message"
                placeholder="Votre message"
                rows="5"
                class="w-full p-2 rounded transition-all duration-300 focus:ring-2 focus:ring-blue-400 focus:scale-105 hover:shadow-lg"
                required
            ></textarea>
        </div>

        <div class="flex justify-center animate-bounce-in" style="animation-delay: 600ms;">
            <button
                type="submit"
                id="submit-button"
                class="bg-[#D57A66] text-white px-4 py-2 rounded hover:bg-[#c56e5b] transition-colors disabled:opacity-50"
            >
                Envoyer
            </button>
        </div>

        <div id="status-message" class="mt-4 p-4 rounded text-center hidden"></div>
    </form>
</div>

<script>
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
    const statusMessage = document.getElementById('status-message') as HTMLDivElement;

    let isLoading = false;

    // Fonction pour afficher le message de statut
    function showStatus(type: 'success' | 'error', message: string) {
        statusMessage.textContent = message;
        statusMessage.classList.remove('hidden', 'bg-green-100', 'text-green-800', 'bg-red-100', 'text-red-800');

        if (type === 'success') {
            statusMessage.classList.add('bg-green-100', 'text-green-800');
        } else {
            statusMessage.classList.add('bg-red-100', 'text-red-800');
        }
    }

    // Fonction pour cacher le message de statut
    function hideStatus() {
        statusMessage.classList.add('hidden');
    }

    // Fonction pour gérer l'état de chargement
    function setLoading(loading: boolean) {
        isLoading = loading;

        if (loading) {
            submitButton.disabled = true;
            submitButton.innerHTML = `
                <span class="flex items-center">
                    <svg class="animate-spin h-5 w-5 mr-2" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"/>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
                    </svg>
                    Envoi en cours...
                </span>
            `;

            // Désactiver tous les champs du formulaire
            const inputs = form.querySelectorAll('input, textarea');
            inputs.forEach(input => {
                (input as HTMLInputElement | HTMLTextAreaElement).disabled = true;
            });
        } else {
            submitButton.disabled = false;
            submitButton.textContent = 'Envoyer';

            // Réactiver tous les champs
            const inputs = form.querySelectorAll('input, textarea');
            inputs.forEach(input => {
                (input as HTMLInputElement | HTMLTextAreaElement).disabled = false;
            });
        }
    }

    // Cacher le message de statut lors de la saisie
    form.addEventListener('input', () => {
        if (!statusMessage.classList.contains('hidden')) {
            hideStatus();
        }
    });

    // Gestion de la soumission du formulaire
    form.addEventListener('submit', async (e) => {
        e.preventDefault();

        setLoading(true);
        hideStatus();

        // Récupérer les données du formulaire
        const formData = new FormData(form);
        const data = {
            nom: formData.get('nom'),
            prenom: formData.get('prenom'),
            projet: formData.get('projet'),
            email: formData.get('email'),
            message: formData.get('message')
        };

        try {
            const response = await fetch('/api/send-email', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Une erreur est survenue');
            }

            showStatus(
                'success',
                'Message envoyé avec succès ! Nous vous répondrons dans les plus brefs délais.'
            );

            // Réinitialiser le formulaire
            form.reset();

            // Redirection après 3 secondes
            setTimeout(() => {
                window.location.href = '/';
            }, 3000);

        } catch (err) {
            console.error('Erreur:', err);
            showStatus(
                'error',
                'Une erreur est survenue lors de l\'envoi. Veuillez réessayer.'
            );
        } finally {
            setLoading(false);
        }
    });
</script>
